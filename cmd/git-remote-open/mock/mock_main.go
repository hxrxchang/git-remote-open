// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/git-remote-open/main.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICommander is a mock of ICommander interface.
type MockICommander struct {
	ctrl     *gomock.Controller
	recorder *MockICommanderMockRecorder
}

// MockICommanderMockRecorder is the mock recorder for MockICommander.
type MockICommanderMockRecorder struct {
	mock *MockICommander
}

// NewMockICommander creates a new mock instance.
func NewMockICommander(ctrl *gomock.Controller) *MockICommander {
	mock := &MockICommander{ctrl: ctrl}
	mock.recorder = &MockICommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommander) EXPECT() *MockICommanderMockRecorder {
	return m.recorder
}

// GetGitRemoteInfo mocks base method.
func (m *MockICommander) GetGitRemoteInfo() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRemoteInfo")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRemoteInfo indicates an expected call of GetGitRemoteInfo.
func (mr *MockICommanderMockRecorder) GetGitRemoteInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRemoteInfo", reflect.TypeOf((*MockICommander)(nil).GetGitRemoteInfo))
}

// Open mocks base method.
func (m *MockICommander) Open(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockICommanderMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockICommander)(nil).Open), arg0)
}
